#[macro_use] extern crate lazy_static;
extern crate libresolv;
extern crate regex;

use regex::Regex;

use std::io;
use std::io::prelude::*;
use std::fs::File;
use std::net::Ipv4Addr;

const RESOLV_CONF: &'static str = "/etc/resolv.conf";

lazy_static! {
    static ref NAMESERVER_RE: Regex = Regex::new(r"^nameserver (\d+).(\d+).(\d+).(\d+)$")
    .expect("The regex to match nameservers is broken.");
}

#[cfg(target_os="linux")]
fn get_resolvers() -> io::Result<Vec<Ipv4Addr>> {
    // Load file
    let mut f = File::open(RESOLV_CONF)?;
    let mut s = String::new();
    f.read_to_string(&mut s)?;
    // Parse only nameservers
    Ok(Vec::new())
}

fn main() {
    let resolvers = get_resolvers();
    println!("Hello, world!");
}
